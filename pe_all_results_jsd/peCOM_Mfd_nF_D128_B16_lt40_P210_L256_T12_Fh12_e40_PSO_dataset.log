INFO:root:<xarray.Dataset> Size: 922MB
Dimensions:         (nCells_full: 465044, time: 2100, nCells_masked: 53973)
Coordinates:
  * nCells_full     (nCells_full) int64 4MB 0 1 2 3 ... 465041 465042 465043
  * nCells_masked   (nCells_masked) int64 432kB 0 1 2 3 ... 53970 53971 53972
  * time            (time) datetime64[ns] 17kB 1850-01-01T00:30:00 ... 2024-1...
Data variables:
    cell_mask       (nCells_full) bool 465kB dask.array<chunksize=(232522,), meta=np.ndarray>
    freeboard       (time, nCells_masked) float32 453MB dask.array<chunksize=(132, 3374), meta=np.ndarray>
    full_to_masked  <U1337572 5MB ...
    ice_area        (time, nCells_masked) float32 453MB dask.array<chunksize=(132, 3374), meta=np.ndarray>
    masked_to_full  <U1337572 5MB ...
    num_raw_files   int64 8B ...
    times           (time) datetime64[ns] 17kB dask.array<chunksize=(2100,), meta=np.ndarray>
INFO:root:times.shape = (2100,)
INFO:root:ice_area.shape = (2100, 53973)
INFO:root:freeboard.shape = (2100, 53973)
INFO:root:cell_mask.shape = (465044,)
INFO:root:evaluated full_to_masked shape = ()
INFO:root:evaluated masked_to_full shape = ()
INFO:root:num_raw_files = 2100
INFO:root:Loaded pre-processed data from Zarr in 1.95 seconds.
INFO:root:=== Patchifying using latitude_spillover_redo algorithm ===
INFO:root:Longitude and latitude array shape: (210, 2) should be (n_patches, 2)
INFO:root:Minimum latitude:  40.05312114509891
INFO:root:Maximum latitude:  87.37120626698702
INFO:root:Minimum longitude: 0.0654903314441616
INFO:root:Maximum longitude: 354.58651214630476
INFO:root:Should be between lat_threshold and 90 degrees for latitude
INFO:root:Should be between 0 and 360 degrees for longitude
INFO:root:Patchifying completed in 0.39 seconds.
INFO:root:Total time steps collected (days or months): 2100
INFO:root:Unique times: 2100
INFO:root:First 35 time values: ['1850-01-01T00:30:00.000000000' '1850-02-01T00:30:00.000000000'
 '1850-03-01T00:30:00.000000000' '1850-04-01T00:30:00.000000000'
 '1850-05-01T00:30:00.000000000' '1850-06-01T00:30:00.000000000'
 '1850-07-01T00:30:00.000000000' '1850-08-01T00:30:00.000000000'
 '1850-09-01T00:30:00.000000000' '1850-10-01T00:30:00.000000000'
 '1850-11-01T00:30:00.000000000' '1850-12-01T00:30:00.000000000'
 '1851-01-01T00:30:00.000000000' '1851-02-01T00:30:00.000000000'
 '1851-03-01T00:30:00.000000000' '1851-04-01T00:30:00.000000000'
 '1851-05-01T00:30:00.000000000' '1851-06-01T00:30:00.000000000'
 '1851-07-01T00:30:00.000000000' '1851-08-01T00:30:00.000000000'
 '1851-09-01T00:30:00.000000000' '1851-10-01T00:30:00.000000000'
 '1851-11-01T00:30:00.000000000' '1851-12-01T00:30:00.000000000'
 '1852-01-01T00:30:00.000000000' '1852-02-01T00:30:00.000000000'
 '1852-03-01T00:30:00.000000000' '1852-04-01T00:30:00.000000000'
 '1852-05-01T00:30:00.000000000' '1852-06-01T00:30:00.000000000'
 '1852-07-01T00:30:00.000000000' '1852-08-01T00:30:00.000000000'
 '1852-09-01T00:30:00.000000000' '1852-10-01T00:30:00.000000000'
 '1852-11-01T00:30:00.000000000']
INFO:root:Last 35 time values: ['2022-02-01T00:30:00.000000000' '2022-03-01T00:30:00.000000000'
 '2022-04-01T00:30:00.000000000' '2022-05-01T00:30:00.000000000'
 '2022-06-01T00:30:00.000000000' '2022-07-01T00:30:00.000000000'
 '2022-08-01T00:30:00.000000000' '2022-09-01T00:30:00.000000000'
 '2022-10-01T00:30:00.000000000' '2022-11-01T00:30:00.000000000'
 '2022-12-01T00:30:00.000000000' '2023-01-01T00:30:00.000000000'
 '2023-02-01T00:30:00.000000000' '2023-03-01T00:30:00.000000000'
 '2023-04-01T00:30:00.000000000' '2023-05-01T00:30:00.000000000'
 '2023-06-01T00:30:00.000000000' '2023-07-01T00:30:00.000000000'
 '2023-08-01T00:30:00.000000000' '2023-09-01T00:30:00.000000000'
 '2023-10-01T00:30:00.000000000' '2023-11-01T00:30:00.000000000'
 '2023-12-01T00:30:00.000000000' '2024-01-01T00:30:00.000000000'
 '2024-02-01T00:30:00.000000000' '2024-03-01T00:30:00.000000000'
 '2024-04-01T00:30:00.000000000' '2024-05-01T00:30:00.000000000'
 '2024-06-01T00:30:00.000000000' '2024-07-01T00:30:00.000000000'
 '2024-08-01T00:30:00.000000000' '2024-09-01T00:30:00.000000000'
 '2024-10-01T00:30:00.000000000' '2024-11-01T00:30:00.000000000'
 '2024-12-01T00:30:00.000000000']
INFO:root:Shape of combined ice_area array: (2100, 53973)
INFO:root:Shape of combined freeboard array: (2100, 53973)
INFO:root:Elapsed time for MonthlyOrDailyNetCDFDataset __init__: 2.3468858129926957 seconds
INFO:root:Training set start date: 1850-01-01T00:30:00.000000000
INFO:root:Training set end date (cosmetic): 2012-12-01T00:30:00.000000000)
INFO:root:(actual last viable target day): 2012-12-01T00:30:00.000000000
INFO:root:Validation set start date: 2013-01-01T00:30:00.000000000
INFO:root:Validation set end date (cosmetic): 2018-12-01T00:30:00.000000000)
INFO:root:(actual last viable target day): 2018-12-01T00:30:00.000000000
INFO:root:Testing set start date: 2019-01-01T00:30:00.000000000
INFO:root:Testing set end date (cosmetic): 2024-12-01T00:30:00.000000000)
INFO:root:(actual last viable target day): 2024-12-01T00:30:00.000000000
INFO:matplotlib.category:Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
INFO:matplotlib.category:Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
