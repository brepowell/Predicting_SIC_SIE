netcdf mpassi.IcoswISC30E3r5.20231120 {
dimensions:
	Time = UNLIMITED ; // (1 currently)
	nCells = 465044 ;
	maxEdges = 6 ;
	nEdges = 1408196 ;
	TWO = 2 ;
	maxEdges2 = 12 ;
	nVertices = 942873 ;
	vertexDegree = 3 ;
variables:
	int edgesOnEdge(nEdges, maxEdges2) ;
		edgesOnEdge:long_name = "List of edges that border each of the cells that straddle each edge." ;
	double weightsOnEdge(nEdges, maxEdges2) ;
		weightsOnEdge:units = "1" ;
		weightsOnEdge:long_name = "Reconstruction weights associated with each of the edgesOnEdge, used to reconstruct the tangentialVelocity from normalVelocities on neighboring edges." ;
	int cellsOnEdge(nEdges, TWO) ;
		cellsOnEdge:long_name = "List of cells that straddle each edge." ;
	int verticesOnEdge(nEdges, TWO) ;
		verticesOnEdge:long_name = "List of vertices that straddle each edge." ;
	double angleEdge(nEdges) ;
		angleEdge:units = "radians" ;
		angleEdge:long_name = "Angle the edge normal makes with local eastward direction." ;
	double dcEdge(nEdges) ;
		dcEdge:units = "m" ;
		dcEdge:long_name = "Length of each edge, computed as the distance between cellsOnEdge." ;
	double dvEdge(nEdges) ;
		dvEdge:units = "m" ;
		dvEdge:long_name = "Length of each edge, computed as the distance between verticesOnEdge." ;
	int indexToEdgeID(nEdges) ;
		indexToEdgeID:long_name = "List of global edge IDs." ;
	double latEdge(nEdges) ;
		latEdge:units = "radians" ;
		latEdge:long_name = "Latitude location of edge midpoints in radians." ;
	double lonEdge(nEdges) ;
		lonEdge:units = "radians" ;
		lonEdge:long_name = "Longitude location of edge midpoints in radians." ;
	int nEdgesOnEdge(nEdges) ;
		nEdgesOnEdge:long_name = "Number of edges that surround each of the cells that straddle each edge. These edges are used to reconstruct the tangential velocities." ;
	double xEdge(nEdges) ;
		xEdge:units = "m" ;
		xEdge:long_name = "X Coordinate in cartesian space of edge midpoints." ;
	double yEdge(nEdges) ;
		yEdge:units = "m" ;
		yEdge:long_name = "Y Coordinate in cartesian space of edge midpoints." ;
	double zEdge(nEdges) ;
		zEdge:units = "m" ;
		zEdge:long_name = "Z Coordinate in cartesian space of edge midpoints." ;
	double fEdge(nEdges) ;
		fEdge:units = "radians s^-1" ;
		fEdge:long_name = "Coriolis parameter at edges." ;
	int cellsOnVertex(nVertices, vertexDegree) ;
		cellsOnVertex:long_name = "List of cells that share a vertex." ;
	int edgesOnVertex(nVertices, vertexDegree) ;
		edgesOnVertex:long_name = "List of edges that share a vertex as an endpoint." ;
	double kiteAreasOnVertex(nVertices, vertexDegree) ;
		kiteAreasOnVertex:units = "m^2" ;
		kiteAreasOnVertex:long_name = "Area of the portions of each dual cell that are part of each cellsOnVertex." ;
	double areaTriangle(nVertices) ;
		areaTriangle:units = "m^2" ;
		areaTriangle:long_name = "Area of each cell (triangle) in the dual grid." ;
	int indexToVertexID(nVertices) ;
		indexToVertexID:long_name = "List of global vertex IDs." ;
	double latVertex(nVertices) ;
		latVertex:units = "radians" ;
		latVertex:long_name = "Latitude location of vertices in radians." ;
	double lonVertex(nVertices) ;
		lonVertex:units = "radians" ;
		lonVertex:long_name = "Longitude location of vertices in radians." ;
	double xVertex(nVertices) ;
		xVertex:units = "m" ;
		xVertex:long_name = "X Coordinate in cartesian space of vertices." ;
	double yVertex(nVertices) ;
		yVertex:units = "m" ;
		yVertex:long_name = "Y Coordinate in cartesian space of vertices." ;
	double zVertex(nVertices) ;
		zVertex:units = "m" ;
		zVertex:long_name = "Z Coordinate in cartesian space of vertices." ;
	double fVertex(nVertices) ;
		fVertex:units = "radians s^-1" ;
		fVertex:long_name = "Coriolis parameter at vertices." ;
	int cellsOnCell(nCells, maxEdges) ;
		cellsOnCell:long_name = "List of cells that neighbor each cell." ;
	int edgesOnCell(nCells, maxEdges) ;
		edgesOnCell:long_name = "List of edges that border each cell." ;
	int verticesOnCell(nCells, maxEdges) ;
		verticesOnCell:long_name = "List of vertices that border each cell." ;
	double areaCell(nCells) ;
		areaCell:units = "m^2" ;
		areaCell:long_name = "Area of each cell in the primary grid." ;
	int indexToCellID(nCells) ;
		indexToCellID:long_name = "List of global cell IDs." ;
	double latCell(nCells) ;
		latCell:units = "radians" ;
		latCell:long_name = "Latitude location of cell centers in radians." ;
	double lonCell(nCells) ;
		lonCell:units = "radians" ;
		lonCell:long_name = "Longitude location of cell centers in radians." ;
	double meshDensity(nCells) ;
		meshDensity:units = "1" ;
